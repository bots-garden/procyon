"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpResponse = void 0;
const base_1 = require("./base");
const env_1 = require("../bindings/env");
const helpers_1 = require("./helpers");
const encoder = new TextEncoder();
const decoder = new TextDecoder();
class HttpResponse {
    constructor(value) {
        this.value = value;
    }
    arrayBuffer() {
        // This is safe because `ffiResult` allocates fresh buffers
        return this.value.buffer;
    }
    json() {
        return JSON.parse(this.text());
    }
    text() {
        return decoder.decode(this.value);
    }
}
exports.HttpResponse = HttpResponse;
class Http extends base_1.default {
    get(url, headers) {
        return this.request(env_1.HttpMethod.Get, url, new Uint8Array([]), headers || {});
    }
    head(url, headers) {
        return this.request(env_1.HttpMethod.Head, url, new Uint8Array([]), headers || {});
    }
    options(url, headers) {
        return this.request(env_1.HttpMethod.Options, url, new Uint8Array([]), headers || {});
    }
    post(url, body, headers) {
        return this.request(env_1.HttpMethod.Post, url, body, headers || {});
    }
    put(url, body, headers) {
        return this.request(env_1.HttpMethod.Put, url, body, headers || {});
    }
    patch(url, body, headers) {
        return this.request(env_1.HttpMethod.Patch, url, body, headers || {});
    }
    delete(url, headers) {
        return this.request(env_1.HttpMethod.Delete, url, new Uint8Array([]), headers || {});
    }
    request(method, url, body, headers) {
        let bodyBytes;
        if (typeof body === "string") {
            bodyBytes = encoder.encode(body);
        }
        else {
            bodyBytes = body;
        }
        const headerString = (0, helpers_1.renderHeaderString)(headers);
        const fullUrl = url + headerString;
        const resultSize = this.env.fetchUrl(method, fullUrl, bodyBytes, this.ident);
        return new HttpResponse(this.ffiResult(resultSize));
    }
}
exports.default = Http;
