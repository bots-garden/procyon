export const LogLevel: Readonly<{
    0: string;
    Null: number;
    1: string;
    Error: number;
    2: string;
    Warn: number;
    3: string;
    Info: number;
    4: string;
    Debug: number;
}>;
export const HttpMethod: Readonly<{
    0: string;
    Get: number;
    1: string;
    Head: number;
    2: string;
    Options: number;
    3: string;
    Post: number;
    4: string;
    Put: number;
    5: string;
    Patch: number;
    6: string;
    Delete: number;
}>;
export const FieldType: Readonly<{
    0: string;
    Meta: number;
    1: string;
    Body: number;
    2: string;
    Header: number;
    3: string;
    Params: number;
    4: string;
    State: number;
    5: string;
    Query: number;
}>;
export const QueryType: Readonly<{
    0: string;
    Select: number;
    1: string;
    Insert: number;
    2: string;
    Update: number;
    3: string;
    Delete: number;
}>;
export class Env {
    addToImports(imports: any): void;
    instantiate(module: any, imports: any): Promise<void>;
    instance: WebAssembly.Instance;
    _exports: WebAssembly.Exports;
    returnResult(arg0: any, arg1: any): void;
    returnError(arg0: any, arg1: any, arg2: any): void;
    logMsg(arg0: any, arg1: any, arg2: any): void;
    fetchUrl(arg0: any, arg1: any, arg2: any, arg3: any): any;
    graphqlQuery(arg0: any, arg1: any, arg2: any): any;
    cacheSet(arg0: any, arg1: any, arg2: any, arg3: any): any;
    cacheGet(arg0: any, arg1: any): any;
    requestGetField(arg0: any, arg1: any, arg2: any): any;
    getStaticFile(arg0: any, arg1: any): any;
    dbExec(arg0: any, arg1: any, arg2: any): any;
    getFfiResult(arg0: any, arg1: any): any;
    addFfiVar(arg0: any, arg1: any, arg2: any): any;
    returnAbort(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any): void;
}
